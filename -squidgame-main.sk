#Author MaatSK

#{squidgame::players::*} list of players
#{squidgame::spectators::*} list of players
#{squidgame::status} ("queue" or "game" or "")
#{squidgame::timer} true or none
#{squidgame::canmove} boolean

#{squidgame::mainLobby} location
#{squidgame::dormLobby} location
#{squidgame::redLightGreenLightLobby} location
#{squidgame::redlightgreenlightbarrier1} location
#{squidgame::redlightgreenlightbarrier2} location

#metadata "status" of player ("game" or "queue" or "spectator")
#metadata "location" of player (location)

#bungeecord connection with option
#create scoreboard
#create npc and skin

#Do not touch this part exept if you know what you are doing
function commandManager(arg-1: text, p: player):
    checkGameSettings({_p}) = true
    if {_arg-1} is not set:
        sendHelpMessage({_p})
    else if {_arg-1} = "setmainlobby":
        setLobbySquidgame({_p}, "main")   
    else if {_arg-1} = "setdormlobby":
        setLobbySquidgame({_p}, "dorm")  
    else if {_arg-1} = "setredlightgreenlightlobby":
        setLobbySquidgame({_p}, "redlightgreenlight")
    else if {_arg-1} = "setredlightgreenlightbarrier1":
        setRedLightGreenLightBarrier({_p}, 1)
    else if {_arg-1} = "setredlightgreenlightbarrier2":
        setRedLightGreenLightBarrier({_p}, 2)
    else if {_arg-1} = "join":
        joinSquidgame({_p})
    else if {_arg-1} = "leave" or "quit":
        leaveSquidgame({_p})
    else if {_arg-1} = "stop":
        stopGame()    
    else:
        sendHelpMessage({_p})

function sendHelpMessage(p: player):
    if {_p} has permission yml value "Permission_Squidgame" from "config":
        send "/squidgame setmainlobby" to {_p}
        send "/squidgame setdormlobby" to {_p}
        send "/squidgame setredlightgreenlightlobby" to {_p}
        send "/squidgame setredlightgreenlightbarrier1" to {_p}
        send "/squidgame setredlightgreenlightbarrier2" to {_p}
        send "/squidgame join" to {_p}
        send "/squidgame leave" to {_p}
        send "/squidgame stop" to {_p}
    else:
        send "/squidgame join" to {_p}
        send "/squidgame leave" to {_p}

function setLobbySquidgame(p: player, type: text):
    {_p} has permission yml value "Permission_Squidgame" from "config"
    if {squidgame::status} != "game":
        if {_type} = "main":
            set {squidgame::mainLobby} to {_p}'s location
            send "%yml value "Message_Logo" from "messages"% %yml value "Message_MainLobby_Changed" from "messages"%" to {_p}
        else if {_type} = "dorm":
            set {squidgame::dormLobby} to {_p}'s location
            send "%yml value "Message_Logo" from "messages"% %yml value "Message_DormLobby_Changed" from "messages"%" to {_p}
        else if {_type} = "redlightgreenlight":
            set {squidgame::redLightGreenLightLobby} to {_p}'s location
            send "%yml value "Message_Logo" from "messages"% %yml value "Message_RedLightGreenLight_Lobby_Changed" from "messages"%" to {_p}
    else:
        send "%yml value "Message_Logo" from "messages"% %yml value "Message_GameStarted_NotAllowed" from "messages"%" to {_p}

function setRedLightGreenLightBarrier(p: player, type: integer):
    {_p} has permission yml value "Permission_Squidgame" from "config"
    if {squidgame::status} != "game":
        if {_type} = 1:
            set {squidgame::redlightgreenlightbarrier1} to {_p}'s location
            send "%yml value "Message_Logo" from "messages"% %yml value "Message_RedLightGreenLight_Barrier_Changed" from "messages"%" to {_p}
        else if {_type} = 2:
            set {squidgame::redlightgreenlightbarrier2} to {_p}'s location
            send "%yml value "Message_Logo" from "messages"% %yml value "Message_RedLightGreenLight_Barrier_Changed" from "messages"%" to {_p}
    else:
        send "%yml value "Message_Logo" from "messages"% %yml value "Message_GameStarted_NotAllowed" from "messages"%" to {_p}

function joinSquidgame(p: player):
    if {squidgame::status} is not "game":
        if metadata "status" of {_p} is not "queue":
            set metadata "status" of {_p} to "queue"
            add {_p} to {squidgame::players::*}
            set {_message} to yml value "Message_JoinQueue" from "messages"
            replace all "{PLAYER}" in {_message} with "%{_p}%"
            send "%yml value "Message_Logo" from "messages"% %{_message}% &f(&c%size of {squidgame::players::*}%&f/&c%yml value "Maximum_Player" from "config"%&f)" to {squidgame::players::*}
            heal {_p}
            set {_p}'s food level to 20
            reset walk speed of {_p}
            reset flight speed of {_p}
            set gamemode of {_p} to survival
            clear inventory of {_p}
            teleport {_p} to {squidgame::dormLobby}
            set flight mode of {_p} to false
            reveal {_p} to all players
            waitingToStartSquidgame()
        else:
            send "%yml value "Message_Logo" from "messages"% %yml value "Message_Already_InQueue" from "messages"%" to {_p}
    else:
        send "%yml value "Message_Logo" from "messages"% %yml value "Message_Already_Started" from "messages"%" to {_p}

function leaveSquidgame(p: player) :: string:
    set {_continue} to false
    if metadata "status" of {_p} is "queue":
        send "%yml value "Message_Logo" from "messages"% %yml value "Message_RemoveFromQueue" from "messages"%" to {_p}
        set {_continue} to true
    else if metadata "status" of {_p} is "game":
        set {_continue} to true
    else if metadata "status" of {_p} is "spectator":
        teleport {_p} to {squidgame::mainLobby}
        stop
    {_continue} is true
    set {_message} to yml value "Message_PlayerLeave" from "messages"
    replace all "{PLAYER}" in {_message} with "%{_p}%"
    remove {_p} from {squidgame::players::*}
    teleport {_p} to {squidgame::mainLobby}
    clear metadata "status" of {_p}
    clear metadata "location" of {_p}
    set {_messageReal} to "%yml value "Message_Logo" from "messages"% %{_message}% &f(&c%size of {squidgame::players::*}%&f/&c%yml value "Maximum_Player" from "config"%&f)"
    send {_messageReal} to {squidgame::players::*}

function checkGameSettings(p: player) :: boolean:
    set {_message} to "&cThe settings of the Squid Game are not ready"
    isMessageYmlSet({_p}) = true
    if {squidgame::dormLobby} is set:
        if {squidgame::redLightGreenLightLobby} is set:
            if {squidgame::mainLobby} is set:
                if {squidgame::redlightgreenlightbarrier1} and {squidgame::redlightgreenlightbarrier2} are set:
                    # if bungeecord ip is set and if server exist
                    return true
                else:
                    send "%yml value "Message_Logo" from "messages"% %yml value "Message_RedLightGreenLight_Barrier_NotSet" from "messages"%" to {_p}
            else:
                if {_p} has permission yml value "Permission_Squidgame" from "config":
                    send "%yml value "Message_Logo" from "messages"% %yml value "Message_MainLobby_NotSet" from "messages"%" to {_p}
                else:
                    send yml value "Message_Settings_NotReady" from "messages" to {_p}
                return false
        else:
            if {_p} has permission yml value "Permission_Squidgame" from "config":
                send "%yml value "Message_Logo" from "messages"% %yml value "Message_RedLightGreenLight_Lobby_NotSet" from "messages"%" to {_p}
            else:
                send "%yml value "Message_Logo" from "messages"% %yml value "Message_Settings_NotReady" from "messages"%" to {_p}
            return false
    else:
        if {_p} has permission yml value "Permission_Squidgame" from "config":
            send "%yml value "Message_Logo" from "messages"% %yml value "Message_DormLobby_NotSet" from "messages"%" to {_p}
        else:
            send "%yml value "Message_Logo" from "messages"% %yml value "Message_Settings_NotReady" from "messages"%" to {_p}
        return false

function waitingToStartSquidgame():
    {squidgame::status} is not set
    set {squidgame::status} to "queue"
    while {squidgame::status} is not "game":
        set {_timer} to yml value "Timer_Waiting_GameToStart_InSeconds" from "config"
        while {_timer} >= 1:
            if {_timer} = 60 or 30 or 20 or 10 or 5 or 4 or 3 or 2 or 1:
                set {_message} to yml value "Message_TimerStart" from "messages"
                replace all "{TIMER}" in {_message} with "%{_timer}%"
                send "%yml value "Message_Logo" from "messages"% %{_message}%" to {squidgame::players::*}
            if {_timer} = 1:
                wait a second
                if size of {squidgame::players::*} >= yml value "Minimum_Player" from "config":
                    startSquidgame()
                else:
                    if size of {squidgame::players::*} <= 0:
                        clear {squidgame::status}
                        stop
                    else:
                        send "%yml value "Message_Logo" from "messages"% %yml value "Message_MinimumPlayerNeeded" from "messages"%" to {squidgame::players::*}
            remove 1 from {_timer}
            wait a second
            
function startSquidgame():
    set {squidgame::status} to "game"
    set metadata "status" of {squidgame::players::*} to "game"
    teleport {squidgame::players::*} to {squidgame::redLightGreenLightLobby}
    startRedLightGreenLight(world of a random player out of {squidgame::players::*})

function checkFinish():
    {squidgame::status} is "game"
    if size of {squidgame::players::*} < 1:
        set {_message} to yml value "Message_NobodyWon" from "messages"
        set {_finish} to true
    else if size of {squidgame::players::*} = 1:
        set {_message} to yml value "Message_PlayerWon" from "messages"
        replace all "{PLAYER}" in {_message} with "%{squidgame::players::*}%"
        clear metadata "location" of {_p}
        set metadata "status" of {_p} to "spectator"
        set {_finish} to true
    if {_finish} is set:
        send "&f--------&k=====================&f--------" to {squidgame::players::*}, {squidgame::spectators::*}
        send "" to {squidgame::players::*}, {squidgame::spectators::*}
        send "%yml value "Message_Logo" from "messages"% %{_message}%" to {squidgame::players::*}, {squidgame::spectators::*}
        send "" to {squidgame::players::*}, {squidgame::spectators::*}
        send "&f--------&k=====================&f--------" to {squidgame::players::*}, {squidgame::spectators::*}
        stopGame()

function stopGame():
    clear {squidgame::status}
    wait 5 seconds
    reset walk speed of {squidgame::spectators::*}, {squidgame::players::*}
    reset flight speed of {squidgame::spectators::*}, {squidgame::players::*}
    set flight mode of {squidgame::spectators::*}, {squidgame::players::*} to false
    teleport {squidgame::players::*}, {squidgame::spectators::*} to {squidgame::mainLobby}
    clear {squidgame::players::*}
    clear {squidgame::spectators::*}
    clear {squidgame::canmove}
    clear {squidgame::timer}

function killPlayer(p: player):
    set {_message} to "%yml value "Message_PlayerEliminated" from "messages"%"
    replace all "{VICTIM}" in {_message} with "%{_p}%"
    send "%yml value "Message_Logo" from "messages"% %{_message}% &f(&c%size of {squidgame::players::*}-1%&f/&c%yml value "Maximum_Player" from "config"%&f)" to {squidgame::players::*}
    remove {_p} from {squidgame::players::*}
    add {_p} to {squidgame::spectators::*}
    set flight mode of {_p} to true
    heal {_p}
    set {_world} to world of {_p}
    set flight mode of {_p} to true
    hide {_p} from {squidgame::players::*}
    set walk speed of {_p} to 0.5
    set flight speed of {_p} to 0.5
    play sound "gunshot" with volume 0.2 at {_p}
    send title "%yml value "Message_PlayerDead" from "messages"%" with subtitle "" to {_p} for 3 seconds with fadein 0.0 second and fade out 1 second
    checkFinish()

function isMessageYmlSet(p: player) :: boolean:
    set {_permission} to yml value "Permission_Squidgame" from "config"
    set {_message} to "&cThe settings of the Squid Game are not ready"
    set {_list::*} to all yaml nodes of "messages"
    if size of {_list::*} != 28:
        if {_p} has permission {_permission}:
            send "&f[SquidGame-Error] &cThe messages.yml file has errors ##1A" to {_p}
        else:
            if yml value "Message_Settings_NotReady" from "messages" is set:
                send "%yml value "Message_Settings_NotReady" from "messages"% ##1A" to {_p}
            else:
                send {_message} to {_p}
        return false
    loop {_list::*}:
        set {_value} to yml value "%loop-value%" from "messages"
        if {_value} is not set:
            if {_p} has permission {_permission}:
                send "&cThe messages.yml file has errors ##1B" to {_p}
            else:
                if yml value "Message_Settings_NotReady" from "messages" is set:
                    send "%yml value "Message_Settings_NotReady" from "messages"% ##1B" to {_p}
                else:
                    send {_message} to {_p}
            return false
        else if length of {_value} < 3:
            if {_p} has permission {_permission}:
                send "&cThe messages.yml file has message that are too short ##1C" to {_p}
            else:
                if yml value "Message_Settings_NotReady" from "messages" is set:
                    send "%yml value "Message_Settings_NotReady" from "messages"% ##1C" to {_p}
                else:
                    send {_message} to {_p}
            return false
    set {_list::*} to all yaml nodes of "config"
    if size of {_list::*} != 9:
        if {_p} has permission {_permission}:
            send "&cThe config.yml file has errors ##2A" to {_p}
        else:
            if yml value "Message_Settings_NotReady" from "messages" is set:
                send "%yml value "Message_Settings_NotReady" from "messages"% ##2A" to {_p}
            else:
                send {_message} to {_p}
        return false
    else:
        set {_server} to yml value "BungeeCord_LobbyServer" from "config"
        if server "%{_server}%" exist:
            broadcast "test"
    return true

command /squidgame [<text>]:
    aliases: sg
    trigger:
        commandManager(arg-1, player)

command /r:
    trigger:
        make player execute command "/sk reload squidgame/"

import:
    java.net.HttpURLConnection
    java.net.URL
    java.io.InputStreamReader
    java.io.BufferedReader

expression response [from] url %string%:
    get:
        set {_connection} to new URL(expr-1).openConnection()
        return join ...new BufferedReader(new InputStreamReader({_connection}.getInputStream() if {_connection}.getResponseCode() is between 200 and 299 else {_connection}.getErrorStream())).lines()

on load:
    load yaml "plugins/SquidGame/config.yml" as "config"
    load yaml "plugins/SquidGame/messages.yml" as "messages"
    set {_version} to yml value "Version" from "config"
    set {_url} to "https://pastebin.com/2A7RwZ2b"
    set {_response} to response url {_url}
    if {_response} contains "version=%{_version}%":
        send "" to ops
        send "%yml value "Message_Logo" from "messages"% &aNo update needed" to ops, console
        send "" to ops
    else:
        send "" to ops
        send "%yml value "Message_Logo" from "messages"% &c&nThere is a new update available on the discord" to ops, console
        send "" to ops

on load:
    wait 2 seconds
    set {_version} to yml value "Version" from "config"
    {_version} is not set
    send "" to ops
    send "&f[SquidGame-Error] &c&lUpdate unreachable there is maybe an error in the config.yml file" to ops, console
    send "" to ops

# command skbee: # nécessite SkBee
#     trigger:
#         while player is online:
#             wait 10 ticks
#             set title of player's scoreboard to "SkBee"
#             set line 2 of player's scoreboard to "rank: joueur"
#             set line 1 of player's scoreboard to "%{number}%"
#             set line 0 of player's scoreboard to "mc.golden.fr"
#             add 1 to {number}

command skore:
    trigger:
        setup skoreboard for player
        if player has a skoreboard:
            loop 100 times:
                set title of skoreboard player to "&a&lDamn, this some clean title"
                set slot 1 of skoreboard player to "%{number}%"
                add 1 to {number}
                wait a tick

command skore2:
    trigger:
        setup skoreboard for player
        if player has a skoreboard:
            set title of skoreboard player to "&a&lDamhhn, this some clean title"
            set {_text} to "Example text !"
            loop length of {_text} times:
                # index will resemble the location in which the loop is in the text message.
                add 1 to {_index}
                # change the wording "first" to "last" for opposite scroll direction
                set slot 1 of skoreboard player to "&a%first {_index} characters of {_text}%"